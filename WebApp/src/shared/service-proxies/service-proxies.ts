//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CampsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getAll(): Observable<Camp[]> {
        let url_ = this.baseUrl + "/api/Camps/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Camp[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Camp[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<Camp[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Camp.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id: number | undefined): Observable<CampsDto> {
        let url_ = this.baseUrl + "/api/Camps/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CampsDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CampsDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<CampsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    create(): Observable<void> {
        let url_ = this.baseUrl + "/api/Camps/Create";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    weatherForecast(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecast(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecast(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
        }));
    }

    protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class Camp implements ICamp {
    id!: number;
    campName!: string | undefined;
    address!: string | undefined;
    email!: string | undefined;
    phone!: string | undefined;
    activitiesOffered!: string | undefined;
    datesAndDurations!: string | undefined;
    ageGroup!: string | undefined;
    costsAndScholarships!: string | undefined;
    testimonialsOrReviews!: string | undefined;
    classSchedule!: string | undefined;
    gender!: string | undefined;
    price!: string | undefined;
    startDate!: string | undefined;
    endDate!: string | undefined;
    capacity!: string | undefined;
    registrationDeadline!: string | undefined;
    spotsAvailable!: string | undefined;
    highlights!: string | undefined;
    language!: string | undefined;
    category!: string | undefined;
    hostedBy!: string | undefined;
    campLink!: string | undefined;
    imageLink!: string | undefined;

    constructor(data?: ICamp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.campName = _data["campName"];
            this.address = _data["address"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.activitiesOffered = _data["activitiesOffered"];
            this.datesAndDurations = _data["datesAndDurations"];
            this.ageGroup = _data["ageGroup"];
            this.costsAndScholarships = _data["costsAndScholarships"];
            this.testimonialsOrReviews = _data["testimonialsOrReviews"];
            this.classSchedule = _data["classSchedule"];
            this.gender = _data["gender"];
            this.price = _data["price"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.capacity = _data["capacity"];
            this.registrationDeadline = _data["registrationDeadline"];
            this.spotsAvailable = _data["spotsAvailable"];
            this.highlights = _data["highlights"];
            this.language = _data["language"];
            this.category = _data["category"];
            this.hostedBy = _data["hostedBy"];
            this.campLink = _data["campLink"];
            this.imageLink = _data["imageLink"];
        }
    }

    static fromJS(data: any): Camp {
        data = typeof data === 'object' ? data : {};
        let result = new Camp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["campName"] = this.campName;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["activitiesOffered"] = this.activitiesOffered;
        data["datesAndDurations"] = this.datesAndDurations;
        data["ageGroup"] = this.ageGroup;
        data["costsAndScholarships"] = this.costsAndScholarships;
        data["testimonialsOrReviews"] = this.testimonialsOrReviews;
        data["classSchedule"] = this.classSchedule;
        data["gender"] = this.gender;
        data["price"] = this.price;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["capacity"] = this.capacity;
        data["registrationDeadline"] = this.registrationDeadline;
        data["spotsAvailable"] = this.spotsAvailable;
        data["highlights"] = this.highlights;
        data["language"] = this.language;
        data["category"] = this.category;
        data["hostedBy"] = this.hostedBy;
        data["campLink"] = this.campLink;
        data["imageLink"] = this.imageLink;
        return data;
    }
}

export interface ICamp {
    id: number;
    campName: string | undefined;
    address: string | undefined;
    email: string | undefined;
    phone: string | undefined;
    activitiesOffered: string | undefined;
    datesAndDurations: string | undefined;
    ageGroup: string | undefined;
    costsAndScholarships: string | undefined;
    testimonialsOrReviews: string | undefined;
    classSchedule: string | undefined;
    gender: string | undefined;
    price: string | undefined;
    startDate: string | undefined;
    endDate: string | undefined;
    capacity: string | undefined;
    registrationDeadline: string | undefined;
    spotsAvailable: string | undefined;
    highlights: string | undefined;
    language: string | undefined;
    category: string | undefined;
    hostedBy: string | undefined;
    campLink: string | undefined;
    imageLink: string | undefined;
}

export class CampsDto implements ICampsDto {
    campName!: string | undefined;
    address!: string | undefined;
    email!: string | undefined;
    phone!: string | undefined;
    activitiesOffered!: string[] | undefined;
    datesAndDurations!: string[] | undefined;
    ageGroup!: string | undefined;
    costsAndScholarships!: string | undefined;
    testimonialsOrReviews!: string[] | undefined;
    classSchedule!: string[] | undefined;
    gender!: string | undefined;
    price!: string | undefined;
    startDate!: string | undefined;
    endDate!: string | undefined;
    capacity!: string | undefined;
    registrationDeadline!: string | undefined;
    spotsAvailable!: string | undefined;
    highlights!: string | undefined;
    language!: string | undefined;
    category!: string | undefined;
    campLink!: string | undefined;
    imageLink!: string | undefined;
    hostedBy!: string | undefined;

    constructor(data?: ICampsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campName = _data["campName"];
            this.address = _data["address"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            if (Array.isArray(_data["activitiesOffered"])) {
                this.activitiesOffered = [] as any;
                for (let item of _data["activitiesOffered"])
                    this.activitiesOffered!.push(item);
            }
            if (Array.isArray(_data["datesAndDurations"])) {
                this.datesAndDurations = [] as any;
                for (let item of _data["datesAndDurations"])
                    this.datesAndDurations!.push(item);
            }
            this.ageGroup = _data["ageGroup"];
            this.costsAndScholarships = _data["costsAndScholarships"];
            if (Array.isArray(_data["testimonialsOrReviews"])) {
                this.testimonialsOrReviews = [] as any;
                for (let item of _data["testimonialsOrReviews"])
                    this.testimonialsOrReviews!.push(item);
            }
            if (Array.isArray(_data["classSchedule"])) {
                this.classSchedule = [] as any;
                for (let item of _data["classSchedule"])
                    this.classSchedule!.push(item);
            }
            this.gender = _data["gender"];
            this.price = _data["price"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.capacity = _data["capacity"];
            this.registrationDeadline = _data["registrationDeadline"];
            this.spotsAvailable = _data["spotsAvailable"];
            this.highlights = _data["highlights"];
            this.language = _data["language"];
            this.category = _data["category"];
            this.campLink = _data["campLink"];
            this.imageLink = _data["imageLink"];
            this.hostedBy = _data["hostedBy"];
        }
    }

    static fromJS(data: any): CampsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CampsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campName"] = this.campName;
        data["address"] = this.address;
        data["email"] = this.email;
        data["phone"] = this.phone;
        if (Array.isArray(this.activitiesOffered)) {
            data["activitiesOffered"] = [];
            for (let item of this.activitiesOffered)
                data["activitiesOffered"].push(item);
        }
        if (Array.isArray(this.datesAndDurations)) {
            data["datesAndDurations"] = [];
            for (let item of this.datesAndDurations)
                data["datesAndDurations"].push(item);
        }
        data["ageGroup"] = this.ageGroup;
        data["costsAndScholarships"] = this.costsAndScholarships;
        if (Array.isArray(this.testimonialsOrReviews)) {
            data["testimonialsOrReviews"] = [];
            for (let item of this.testimonialsOrReviews)
                data["testimonialsOrReviews"].push(item);
        }
        if (Array.isArray(this.classSchedule)) {
            data["classSchedule"] = [];
            for (let item of this.classSchedule)
                data["classSchedule"].push(item);
        }
        data["gender"] = this.gender;
        data["price"] = this.price;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["capacity"] = this.capacity;
        data["registrationDeadline"] = this.registrationDeadline;
        data["spotsAvailable"] = this.spotsAvailable;
        data["highlights"] = this.highlights;
        data["language"] = this.language;
        data["category"] = this.category;
        data["campLink"] = this.campLink;
        data["imageLink"] = this.imageLink;
        data["hostedBy"] = this.hostedBy;
        return data;
    }
}

export interface ICampsDto {
    campName: string | undefined;
    address: string | undefined;
    email: string | undefined;
    phone: string | undefined;
    activitiesOffered: string[] | undefined;
    datesAndDurations: string[] | undefined;
    ageGroup: string | undefined;
    costsAndScholarships: string | undefined;
    testimonialsOrReviews: string[] | undefined;
    classSchedule: string[] | undefined;
    gender: string | undefined;
    price: string | undefined;
    startDate: string | undefined;
    endDate: string | undefined;
    capacity: string | undefined;
    registrationDeadline: string | undefined;
    spotsAvailable: string | undefined;
    highlights: string | undefined;
    language: string | undefined;
    category: string | undefined;
    campLink: string | undefined;
    imageLink: string | undefined;
    hostedBy: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date!: DateTime;
    temperatureC!: number;
    readonly temperatureF!: number;
    summary!: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? DateTime.fromISO(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toFormat('yyyy-MM-dd') : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date: DateTime;
    temperatureC: number;
    temperatureF: number;
    summary: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}